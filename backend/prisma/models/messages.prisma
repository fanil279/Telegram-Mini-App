model Message {

    id BigInt @id @default(autoincrement())

    match Match? @relation(fields: [matchId], references: [id], onDelete: SetNull)
    matchId BigInt? @map("match_id")

    senderTelegram User? @relation("SenderId", fields: [senderId], references: [id], onDelete: SetNull)
    senderId BigInt? @map("sender_id")

    receiverTelegram User? @relation("ReceiverId", fields: [receiverId], references: [telegramId], onDelete: SetNull)
    receiverId BigInt? @map("receiver_id")

    reply Message? @relation("MessageReplies", fields: [replyToId], references: [id], onDelete: SetNull)
    replyToId BigInt? @map("reply_to_id")

    content String @db.VarChar(1000)
    isRead Boolean @default(false) @map("is_read")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt

    @@index([matchId, senderId, receiverId, replyToId, createdAt])

    @@map("messages")

    @@schema("base")


    replies Message[] @relation("MessageReplies")
    attachments MessageAttachment[]
    report Report? @relation("MessageReport")
    notification Notification? @relation("MessageNotification")

}
