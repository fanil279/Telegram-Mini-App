model Message {

    id               BigInt   @id @default(autoincrement())

    match            Match?   @relation(fields: [matchId], references: [id], onDelete: SetNull, onUpdate: Cascade)
    matchId          BigInt?

    senderTelegram   User?    @relation("SenderTelegramId", fields: [senderTelegramId], references: [telegramId], onDelete: SetNull, onUpdate: Cascade)
    senderTelegramId BigInt?

    receiverTelegram User?    @relation("ReceiverTelegramId", fields: [receiverTelegramId], references: [telegramId], onDelete: SetNull, onUpdate: Cascade)
    receiverTelegramId BigInt?

    reply            Message? @relation("MessageReplies", fields: [replyToId], references: [id], onDelete: SetNull, onUpdate: Cascade)
    replyToId        BigInt?

    content          String

    createdAt        DateTime @default(now())
    updatedAt        DateTime @updatedAt

    @@index([matchId, senderTelegramId, receiverTelegramId, replyToId, createdAt])


    replies       Message[]           @relation("MessageReplies")
    attachments   MessageAttachment[]
    report        Report?             @relation("MessageReport")
    notification  Notification?       @relation("MessageNotification")

}
